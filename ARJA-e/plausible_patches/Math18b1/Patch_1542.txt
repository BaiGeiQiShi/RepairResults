1 InsertBefore /arja/105_bugs_with_src/Math18b1/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java 934
Faulty:
return res;
Seed:
boundaries=null;
**************************************************
2 InsertBefore /arja/105_bugs_with_src/Math18b1/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java 459
Faulty:
break generationLoop;
Seed:
for (int k=0; k < lambda; k++) {
  RealMatrix arxk=null;
  for (int i=0; i < checkFeasableCount + 1; i++) {
    if (diagonalOnly <= 0) {
      arxk=xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));
    }
 else {
      arxk=xmean.add(times(diagD,arz.getColumnMatrix(k)).scalarMultiply(sigma));
    }
    if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {
      break;
    }
    arz.setColumn(k,randn(dimension));
  }
  copyColumn(arxk,0,arx,k);
  try {
    fitness[k]=fitfun.value(arx.getColumn(k));
  }
 catch (  TooManyEvaluationsException e) {
    break generationLoop;
  }
}
**************************************************
3 Replace /arja/105_bugs_with_src/Math18b1/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java 930
Faulty:
for (int i=0; i < x.length; i++) {
  double diff=boundaries[1][i] - boundaries[0][i];
  res[i]=(x[i] - boundaries[0][i]) / diff;
}
Seed:
for (int i=0; i < checkFeasableCount; i++) {
  double diff=boundaries[1][i] - boundaries[0][i];
  res[i]=(x[i] - boundaries[0][i]) / diff;
}
**************************************************
Evaluations: 1550
EstimatedTime: 12909951

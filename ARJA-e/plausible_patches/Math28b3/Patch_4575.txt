1 InsertBefore /arja/105_bugs_with_src/Math28b3/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java 121
Faulty:
int column=i + tableau.getArtificialVariableOffset();
Seed:
for (int i=tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
  final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);
  final double entry=tableau.getEntry(i,col);
  if (Precision.compareTo(entry,0d,maxUlps) > 0) {
    final double ratio=rhs / entry;
    final int cmp=Double.compare(ratio,minRatio);
    if (cmp == 0) {
      minRatioPositions.add(i);
    }
 else     if (cmp < 0) {
      minRatio=ratio;
      minRatioPositions=new ArrayList<Integer>();
      minRatioPositions.add(i);
    }
  }
}
**************************************************
2 Delete /arja/105_bugs_with_src/Math28b3/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java 119
Faulty:
for (Integer row : minRatioPositions) {
  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {
    int column=i + tableau.getArtificialVariableOffset();
    final double entry=tableau.getEntry(row,column);
    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {
      return row;
    }
  }
}
Seed:
NULL
**************************************************
3 InsertBefore /arja/105_bugs_with_src/Math28b3/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java 357
Faulty:
for (int i=1; i < getHeight(); i++) {
  int col=0;
  for (int j=0; j < getWidth(); j++) {
    if (!columnsToDrop.contains(j)) {
      matrix[i - 1][col++]=tableau.getEntry(i,j);
    }
  }
}
Seed:
columnsToDrop.add(0);
**************************************************
Evaluations: 4647
EstimatedTime: 1169642

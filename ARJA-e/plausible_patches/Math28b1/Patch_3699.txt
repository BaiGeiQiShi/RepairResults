1 Replace /arja/105_bugs_with_src/Math28b1/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java 104
Faulty:
minRatioPositions.add(i);
Seed:
if (cmp < 0) {
  minRatio=ratio;
  minRatioPositions=new ArrayList<Integer>();
  minRatioPositions.add(i);
}
**************************************************
2 InsertBefore /arja/105_bugs_with_src/Math28b1/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java 356
Faulty:
double[][] matrix=new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
Seed:
this.numArtificialVariables=getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
**************************************************
3 Replace /arja/105_bugs_with_src/Math28b1/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java 144
Faulty:
if (i < minIndex) {
  minIndex=i;
  minRow=row;
}
Seed:
if (i < minIndex || !(Precision.equals(tableau.getEntry(0,tableau.getRhsOffset()),0d,epsilon))) {
  minIndex=i;
  minRow=row;
}
**************************************************
4 Replace /arja/105_bugs_with_src/Math28b1/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java 140
Faulty:
for (Integer row : minRatioPositions) {
  int i=tableau.getNumObjectiveFunctions();
  for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
    if (row == tableau.getBasicRow(i)) {
      if (i < minIndex) {
        minIndex=i;
        minRow=row;
      }
    }
  }
}
Seed:
for (Integer row : minRatioPositions) {
  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {
    int column=i + tableau.getArtificialVariableOffset();
    final double entry=tableau.getEntry(row,column);
    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {
      return row;
    }
  }
}
**************************************************
Evaluations: 4176
EstimatedTime: 912224
